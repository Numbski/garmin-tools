#!/usr/bin/env casperjs
// Don't ask me why casperjs respects this.
// It's perl pragma, but it works.  WTF.
"use strict";

var casper = require('casper').create({
// Comment these out to stop debugging.
    verbose: true,
    logLevel: "debug"
});
// removing default options passed by the Python executable
// Cuz somehow, some way python could pass stuff to this script.
// and that would be bad, m'kay?
casper.cli.drop("cli");
casper.cli.drop("casper-path");


// Let the user know what they need to provide us to work.
if (casper.cli.args.length === 0 && Object.keys(casper.cli.options).length === 0) {
    casper.echo("Usage: ./post-weight --username=myusername --password=mypassword --weight=175.5").exit();
    exit;
}

// Require username and password on the command line until I get around to implementing
// an rc file to read from, and I decide on whether or not to store a cookie instead.
// On one hand, I want to force the user to do something like:
// garminconnect --getCookie and then store that to a file and use it.
// On the other hand, I have no idea how long that stored cookie would be good for.
// Need to get around to figuring that out.  Also, I write comments.
if (!casper.cli.has('username') && !casper.cli.has('password')) {
    casper.echo('You must provide both --username= and --password= \(for now\)').exit();
    exit;
}

// Well, it is 'post-weight'.  Gotta provide this.
if (!casper.cli.has('weight')) {
    casper.echo('Please provide --weight=').exit();
    exit;
}

// God I hate javascript's date formatting.  We need yyyy-mm-dd.
// Of course Date.getMonth provides 0-11 instead of 1-12, because reasons.
//var d = new Date();
//var myDate = casper.cli.args[1] || (d.getFullYear() + '-' += (d.getMonth()+1) += '-' += d.getDate());
//casper.echo(myDate);

// Can comment these out later.  I use exclamation points in
// my password, and didn't trust casperjs not to mangle my input.
casper.echo("Casper CLI passed options:");
require("utils").dump(casper.cli.options);

// CasperJS inexplicably won't allow me to interpolate casper.cli.get('thing').
// So we need to store these values out to vars to use them.  :\
var username = casper.cli.get('username');
var password = casper.cli.get('password');
var weight = casper.cli.get('weight');


// Screen capping and futzing with wait timeouts during dev.
// these can be totally deleted once we're stable.
//casper.options.viewportSize = { width: 1024, height: 768 };
//casper.options.waitTimeout = 60000;

// Ugly, dirty, sinful hack.  The actual login page is nested in an iframe
// at connect.garmin.com, so automations can't see it.  So we just pull the url
// of that iframe instead, which is - long and ugly.  I need to Firebug that page
// and pull out the actually login api and use that instead, or at least test if 
// the public portion of their api will give me a good cookie to store.
casper.start('https://sso.garmin.com/sso/login?service=https%3A%2F%2Fconnect.garmin.com%2Fpost-auth%2Flogin&webhost=olaxpw-connect19.garmin.com&source=https%3A%2F%2Fconnect.garmin.com%2Fen-US%2Fsignin&redirectAfterAccountLoginUrl=https%3A%2F%2Fconnect.garmin.com%2Fpost-auth%2Flogin&redirectAfterAccountCreationUrl=https%3A%2F%2Fconnect.garmin.com%2Fpost-auth%2Flogin&gauthHost=https%3A%2F%2Fsso.garmin.com%2Fsso&locale=en_US&id=gauth-widget&cssUrl=https%3A%2F%2Fstatic.garmincdn.com%2Fcom.garmin.connect%2Fui%2Fcss%2Fgauth-custom-v1.2-min.css&clientId=GarminConnect&rememberMeShown=true&rememberMeChecked=false&createAccountShown=true&openCreateAccount=false&usernameShown=false&displayNameShown=false&consumeServiceTicket=false&initialFocus=true&embedWidget=false&generateExtraServiceTicket=false#', function() {
//    this.echo(this.getTitle());
});

// While we're doing ugly and sinful things, find the form fields, populate, and submit.
casper.thenEvaluate(function(){
    document.querySelector('input[name="username"]').setAttribute('value',username);
    document.querySelector('input[name="password"]').setAttribute('value',password);
    document.querySelector('form[id="login-form"]').submit();
//    this.echo(this.getTitle());
});

// Our undocumented API.  Careful with this.  
// Apparently Garmin does not sanitize their inputs.  Sending malformed JSON
// can and will bring down their whole system.  I'm not even joking.
// http://i.imgur.com/hTYssMQ.png
casper.thenOpen('https://connect.garmin.com/modern/proxy/weight-service/user-weight',
        {
        method: 'POST',
        data:{ 'value' : weight, 'unitKey' : 'lbs', 'date': '2015-12-04'},
//        data:{ 'value' : casper.cli.get('weight'), 'unitKey' : 'lbs', 'date': '2015-12-04'},
        headers:{'Accept':'application/json','Content-Type': 'application/json'}
        });

// Uncoment if you need to debug responses or make sure we're running to completion.
// The /weight-service/user-weight API returns an HTTP 204 - even though casperjs
// thinks that's a failure code, it really isn't.  Really need to write in a validation
// so that we go back and make sure connect has the value we sent.  Details.
//casper.then(function(){
//        this.echo('seems like posted?');
//        require('utils').dump(this.getPageContent());
//});

// Uncommenting this will result in dumping screen.png in pwd of our virtual
// browser viewport.  Good for knowing what casperjs is seeing.  Still have to hack the DOM by
// hand, but it's a start.
//casper.then(function(){
//    this.echo('Well, we made it to the end.');
//    this.capture('screen.png');
//});

casper.run();
